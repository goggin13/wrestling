 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/colleges", type: :request do
  # College. As you add validations to College, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {name: "Cornell"}
  }

  let(:invalid_attributes) {
    {name: ""}
  }

  before do
    user = FactoryBot.create(:user, email: "goggin13@gmail.com")
    sign_in(user)
  end

  describe "GET /index" do
    it "renders a successful response" do
      College.create! valid_attributes
      get colleges_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      college = College.create! valid_attributes
      get college_url(college)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_college_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      college = College.create! valid_attributes
      get edit_college_url(college)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new College" do
        expect {
          post colleges_url, params: { college: valid_attributes }
        }.to change(College, :count).by(1)
      end

      it "redirects to the created college" do
        post colleges_url, params: { college: valid_attributes }
        expect(response).to redirect_to(college_url(College.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new College" do
        expect {
          post colleges_url, params: { college: invalid_attributes }
        }.to change(College, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post colleges_url, params: { college: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {name: "PSU"}
      }

      it "updates the requested college" do
        college = College.create! valid_attributes
        patch college_url(college), params: { college: new_attributes }
        college.reload
        expect(college.name).to eq("PSU")
      end

      it "redirects to the college" do
        college = College.create! valid_attributes
        patch college_url(college), params: { college: new_attributes }
        college.reload
        expect(response).to redirect_to(college_url(college))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        college = College.create! valid_attributes
        patch college_url(college), params: { college: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested college" do
      college = College.create! valid_attributes
      expect {
        delete college_url(college)
      }.to change(College, :count).by(-1)
    end

    it "redirects to the colleges list" do
      college = College.create! valid_attributes
      delete college_url(college)
      expect(response).to redirect_to(colleges_url)
    end
  end
end
